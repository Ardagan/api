// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package admin_service;
option go_package = "tpb";

import "search_attributes.proto";
import "history.proto";
import "shard.proto";
import "task_list.proto";
import "workflow_execution.proto";

/**
* AdminService provides advanced APIs for debugging and analysis with admin privilege
**/
service AdminService {
    /**
    * DescribeWorkflowExecution returns information about the internal states of workflow execution.
    **/
    rpc DescribeWorkflowExecution (workflow_execution.DescribeWorkflowExecutionRequest) returns (workflow_execution.DescribeWorkflowExecutionAdminResponse) {
    }

    /**
    * DescribeHistoryHost returns information about the internal states of a history host
    **/
    rpc DescribeHistoryHost (history.DescribeHistoryHostRequest) returns (history.DescribeHistoryHostResponse) {
    }

    rpc CloseShard (shard.CloseShardRequest) returns (shard.CloseShardResponse) {
    }

    rpc RemoveTask (task_list.RemoveTaskRequest) returns (task_list.RemoveTaskResponse) {
    }

    /**
    * Returns the raw history of specified workflow execution.  It fails with 'EntityNotExistError' if specified workflow
    * execution in unknown to the service.
    **/
    rpc GetWorkflowExecutionRawHistory (workflow_execution.GetWorkflowExecutionRawHistoryRequest) returns (workflow_execution.GetWorkflowExecutionRawHistoryResponse) {
    }

    /**
    * Returns the raw history of specified workflow execution.  It fails with 'EntityNotExistError' if specified workflow
    * execution in unknown to the service.
    * StartEventId defines the beginning of the event to fetch. The first event is inclusive.
    * EndEventId and EndEventVersion defines the end of the event to fetch. The end event is exclusive.
    **/
    rpc GetWorkflowExecutionRawHistoryV2 (workflow_execution.GetWorkflowExecutionRawHistoryV2Request) returns (workflow_execution.GetWorkflowExecutionRawHistoryV2Response) {
    }

    /**
    * AddSearchAttribute whitelist search attribute in request.
    **/
    rpc AddSearchAttribute (search_attributes.AddSearchAttributeRequest) returns (search_attributes.AddSearchAttributeResponse) {
    }
}

