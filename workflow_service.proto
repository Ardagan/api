// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal;
option go_package = "tpb";

import "shared_domain.proto";

/**
* WorkflowService API is exposed to provide support for long running applications. Application is expected to call
* StartWorkflowExecution to create an instance for each instance of long running workflow. Such applications are expected
* to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService. For each
* DecisionTask, application is expected to process the history of events for that session and respond back with next
* decisions. For each ActivityTask, application is expected to execute the actual logic for that task and respond back
* with completion or failure. Worker is expected to regularly heartbeat while activity task is running.
**/
service WorkflowService {
  /**
  * RegisterDomain creates a new domain which can be used as a container for all resources. Domain is a top level
  * entity within Temporal, used as a container for all resources like workflow executions, tasklists, etc. Domain
  * acts as a sandbox and provides isolation for all resources within the domain. All resources belongs to exactly one
  * domain.
  **/
  rpc RegisterDomain(RegisterDomainRequest) returns (RegisterDomainResponse) {}
}
