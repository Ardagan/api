// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package activity;
option go_package = "tpb";

import "common.proto";

message PollForActivityTaskRequest {
    string domain = 1;
    common.TaskList taskList = 2;
    string identity = 3;
    common.TaskListMetadata taskListMetadata = 4;
}

message PollForActivityTaskResponse {
    bytes taskToken = 1;
    common.WorkflowExecution workflowExecution = 2;
    string activityId = 3;
    common.ActivityType activityType = 4;
    bytes input = 5;
    int64 scheduledTimestamp = 6;
    int32 scheduleToCloseTimeoutSeconds = 7;
    int64 startedTimestamp = 8;
    int32 startToCloseTimeoutSeconds = 9;
    int32 heartbeatTimeoutSeconds = 10;
    int32 attempt = 11;
    int64 scheduledTimestampOfThisAttempt = 12;
    bytes heartbeatDetails = 13;
    common.WorkflowType workflowType = 14;
    string workflowDomain = 15;
    common.Header header = 16;
}

message RecordActivityTaskHeartbeatRequest {
    bytes taskToken = 1;
    bytes details = 2;
    string identity = 3;
}

message RecordActivityTaskHeartbeatByIDRequest {
    string domain = 1;
    string workflowID = 2;
    string runID = 3;
    string activityID = 4;
    bytes details = 5;
    string identity = 6;
}

message RecordActivityTaskHeartbeatResponse {
    bool cancelRequested = 1;
}

message RespondActivityTaskCompletedRequest {
    bytes taskToken = 1;
    bytes result = 2;
    string identity = 3;
}

message RespondActivityTaskCompletedResponse {
}

message RespondActivityTaskFailedRequest {
    bytes taskToken = 1;
    string reason = 2;
    bytes details = 3;
    string identity = 4;
}

message RespondActivityTaskFailedResponse {
}

message RespondActivityTaskCanceledRequest {
    bytes taskToken = 1;
    bytes details = 2;
    string identity = 3;
}

message RespondActivityTaskCanceledResponse {
}

message RespondActivityTaskCompletedByIDRequest {
    string domain = 1;
    string workflowID = 2;
    string runID = 3;
    string activityID = 4;
    bytes result = 5;
    string identity = 6;
}

message RespondActivityTaskCompletedByIDResponse {
}

message RespondActivityTaskFailedByIDRequest {
    string domain = 1;
    string workflowID = 2;
    string runID = 3;
    string activityID = 4;
    string reason = 5;
    bytes details = 6;
    string identity = 7;
}

message RespondActivityTaskFailedByIDResponse {
}

message RespondActivityTaskCanceledByIDRequest {
    string domain = 1;
    string workflowID = 2;
    string runID = 3;
    string activityID = 4;
    bytes details = 5;
    string identity = 6;
}

message RespondActivityTaskCanceledByIDResponse {
}