// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package common;
option go_package = "github.com/temporalio/temporal/proto/common";

import "enums/enums.proto";

message WorkflowType {
    string name = 1;
}

// TODO: replace with WorkflowType
message WorkflowTypeFilter {
    string name = 1;
}

message WorkflowExecution {
    string workflowId = 1;
    string runId = 2;
}

// TODO: replace with WorkflowExecution
message WorkflowExecutionFilter {
    string workflowId = 1;
    string runId = 2;
}

message TaskList {
    string name = 1;
    enums.TaskListKind kind = 2;
}

message SearchAttributes {
    map<string, bytes> indexedFields = 1;
}

message RetryPolicy {
    // Interval of the first retry. If coefficient is 1.0 then it is used for all retries.
    int32 initialIntervalInSeconds = 1;

    // Coefficient used to calculate the next retry interval.
    // The next retry interval is previous interval multiplied by the coefficient.
    // Must be 1 or larger.
    double backoffCoefficient = 2;

    // Maximum interval between retries. Exponential backoff leads to interval increase.
    // This value is the cap of the increase. Default is 100x of initial interval.
    int32 maximumIntervalInSeconds = 3;

    // Maximum number of attempts. When exceeded the retries stop even if not expired yet.
    // Must be 1 or bigger. Default is unlimited.
    int32 maximumAttempts = 4;

    // Non-Retriable errors. Will stop retrying if error matches this list.
    repeated string nonRetriableErrorReasons = 5;

    // Expiration time for the whole retry process.
    int32 expirationIntervalInSeconds = 6;
}

message Memo {
    map<string, bytes> fields = 1;
}

message Header {
    map<string, bytes> fields = 1;
}

message ResetPointInfo {
    string binaryChecksum = 1;
    string runId = 2;
    int64 firstDecisionCompletedId = 3;
    int64 createdTimeNano = 4;
    // The time that the run is deleted due to retention.
    int64 expiringTimeNano = 5;
    // false if the reset point has pending childWFs/reqCancels/signalExternals.
    bool resettable = 6;
}

message ResetPoints {
    repeated ResetPointInfo points = 1;
}

message ActivityType {
    string name = 1;
}

message TaskListMetadata {
    double maxTasksPerSecond = 1;
}

message WorkflowQuery {
    string queryType = 1;
    bytes queryArgs = 2;
}

message DataBlob {
    enums.EncodingType EncodingType = 1;
    bytes Data = 2;
}

message ReplicationInfo {
    int64 version = 1;
    int64 lastEventId = 2;
}

// VersionHistoryItem contains signal eventID and the corresponding version.
message VersionHistoryItem {
    int64 eventID = 1;
    int64 version = 2;
}

// VersionHistory contains the version history of a branch.
message VersionHistory {
    bytes branchToken = 1;
    repeated VersionHistoryItem items = 2;
}

// VersionHistories contains all version histories from all branches.
message VersionHistories {
    int32 currentVersionHistoryIndex = 1;
    repeated VersionHistory histories = 2;
}

message StartTimeFilter {
    int64 earliestTime = 1;
    int64 latestTime = 2;
}

message StickyExecutionAttributes {
    common.TaskList workerTaskList = 1;
    int32 scheduleToStartTimeoutSeconds = 2;
}

message WorkflowQueryResult {
    enums.QueryResultType resultType = 1;
    bytes answer = 2;
    string errorReason = 3;
    bytes errorDetails = 4;
}

message TaskListStatus {
    int64 backlogCountHint = 1;
    int64 readLevel = 2;
    int64 ackLevel = 3;
    double ratePerSecond = 4;
    TaskIDBlock taskIDBlock = 5;
}

message TaskIDBlock {
    int64 startID = 1;
    int64 endID = 2;
}

message PollerInfo {
    // Unix Nano
    int64 lastAccessTime = 1;
    string identity = 2;
    double ratePerSecond = 3;
}

message QueryRejected {
    enums.WorkflowExecutionCloseStatus closeStatus = 1;
}
