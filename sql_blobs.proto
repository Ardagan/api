// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package sql_blobs;
option go_package = "tpb";

// HistoryBranchRange represents a piece of range for a branch.
message HistoryBranchRange {
    // BranchID of original branch forked from.
    string branchID = 1;
    // Beginning node for the range, inclusive.
    int64 beginNodeID = 2;
    // Ending node for the range, exclusive.
    int64 endNodeID = 3;
}

// For history persistence to serialize/deserialize branch details.
message HistoryBranch {
    string treeID = 1;
    string branchID = 2;
    repeated HistoryBranchRange ancestors = 3;
}

// VersionHistoryItem contains signal eventID and the corresponding version.
message VersionHistoryItem {
    int64 eventID = 1;
    int64 version = 2;
}

// VersionHistory contains the version history of a branch.
message VersionHistory {
    bytes branchToken = 1;
    repeated VersionHistoryItem items = 2;
}

// VersionHistories contains all version histories from all branches.
message VersionHistories {
    int32 currentVersionHistoryIndex = 1;
    repeated VersionHistory histories = 2;
}

