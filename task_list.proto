// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package task_list;
option go_package = "tpb";

import "enums.proto";
import "common.proto";

message ResetStickyTaskListRequest {
    string domain = 1;
    common.WorkflowExecution execution = 2;
}

message ResetStickyTaskListResponse {
}

message RespondQueryTaskCompletedRequest {
    bytes taskToken = 1;
    enums.QueryTaskCompletedType completedType = 2;
    bytes queryResult = 3;
    string errorMessage = 4;
}

message RespondQueryTaskCompletedResponse {
}

message DescribeTaskListRequest {
    string domain = 1;
    common.TaskList taskList = 2;
    enums.TaskListType taskListType = 3;
    bool includeTaskListStatus = 4;
}

message DescribeTaskListResponse {
    repeated PollerInfo pollers = 1;
    TaskListStatus taskListStatus = 2;
}

message TaskListStatus {
    int64 backlogCountHint = 1;
    int64 readLevel = 2;
    int64 ackLevel = 3;
    double ratePerSecond = 4;
    TaskIDBlock taskIDBlock = 5;
}

message TaskIDBlock {
    int64 startID = 1;
    int64 endID = 2;
}

message RemoveTaskRequest {
    int32 shardID = 1;
    int32 type = 2;
    int64 taskID = 3;
}

message PollerInfo {
    // Unix Nano
    int64 lastAccessTime = 1;
    string identity = 2;
    double ratePerSecond = 3;
}